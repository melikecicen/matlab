Creating a New Class(2/2) Creating a Class Definition TASKLARI;
Task 1
% course.m dosyasına course adında bir sınıf tanımladım.
classdef course
end

Task 2
% c adında bir kurs nesnesi oluşturdum.
c = course

Task 3
% course.m dosyasına tanımladığım sınıfa özellikler bloğu ekledim.
classdef course
    properties
        Name
        Level
        Waypoints
    end
end

Task 4
% c'nin bir level özelliğine sahip olduğunu doğruladım.
c = course
lvl = c.Level

Task 5 
% c'nin Level özelliğini White dizesine ayarladım.
c.Level = "White"

Task6
% c'nin Level özelliğini 42 ile değiştirdim.
c.Level = 42

**Classes Within Classes TASKLARI;
Task 1
% idstck.m dosyasında özellikleri olan bir idstick adında sınıf tanımladım.
classdef idstick
    properties
        SerialNumber
        Status
        Participant
        Course
        Timestamps
    end
end

Task 2
% id adında ID stick nesnesi oluşturdum. SerialNumber özelliğini 1234 olarak ayarladım.
id = idstick
id.SerialNumber = 1234

Task 3 
% id'nin Course özelliğini c olarak ayarladım.
id.Course = c

Task 4
%id'nin Course özelliğindeki course nesnesinin Waypoints özelliğinde saklanan waypoints listesini aldım. Sonucu w adlı bir değişkene kaydettim.
w = id.Course.Waypoints

**Giving Your Class Functionality(2/3) Adding a Method to a Class TASKLARI;
Task 1
% idstick.m dosyasını bir yöntem bloğu ekleyip yöntem bloğuna sinyal adında bir yöntem ekledim.
classdef idstick
    properties
        SerialNumber
        Status
        Participant
        Course
        Timestamps
    end
    methods
        function signal(id,ok)
            if ok
                disp("Beep")
            else
                disp("Buzz")
            end
        end
    end
end

Task 2
% Sinyal yöntemini çağırıp ilk gridiyi de idstick nesnesinden id'yi seçtim ve başarılı bir check-in yanıtını simüle etmek için ikinci giriş olarak true değerini kullandım.
signal(id,true)

Task 3 
% idstick.m dosyasında sinyal yöntemini değiştirdim.
classdef idstick
    properties
        SerialNumber
        Status
        Participant
        Course
        Timestamps
    end
    methods
        function signal(id,ok)
            if ok
                if (id.Status == "Ready") || (id.Status == "Done")
                    disp("Beep beep")
                else
                    disp("Beep")
                end
            else
                disp("Buzz")
            end
        end
    end
end

**Giving Your Class Functionality(3/3) Adding More Methods TASKLARI;
Task 1
% idstick.m dosyasına , register adı verilen yeni bir method ekledim.
classdef idstick
    properties
        SerialNumber
        Status
        Participant
        Course
        Timestamps
    end
    methods
        function signal(id,ok)
            if ok
                if (id.Status == "Ready") || (id.Status == "Done")
                    disp("Beep beep")
                else
                    disp("Beep")
                end
            else
                disp("Buzz")
            end
        end
        function id= register(id,name,course)
            id.Participant = name;
            id.Course = course;
        end
    end
end

Task 2
% Course nesnesinde depolanan course'a Erik adındaki katılımcıyı kaydetmek için register yöntemini çağırdım ve sonucu idout adında yeni ID stick nesnesine atadım.
idout = register(id,"Erik",c)

Task 3 
% Önce id'nin Participant özelliğinin değerini p1 adlı bir değişkene atadım. Sonra idout'un Participant özelliğinin değerini p2 adlı bir değişkene atadım.
p1 = id.Participant
p2 = idout.Participant

Task 4 
% idstick.m dosyasında register yöntemini değiştirdim. Participant ve Course özelliklerini ayarlayıp Status özelliğini Ready olarak ayarladım. Son olarak sinyal yöntemini çağırdım.
classdef idstick
    properties
        SerialNumber
        Status
        Participant
        Course
        Timestamps
    end
    methods
        function signal(id,ok)
            if ok
                if (id.Status == "Ready") || (id.Status == "Done")
                    disp("Beep beep")
                else
                    disp("Beep")
                end
            else
                disp("Buzz")
            end
        end
        function id= register(id,name,course)
            id.Participant = name;
            id.Course = course;
            id.Status = "Ready";
            signal(id,true)
        end
    end
end

**Constructor Methods(2/2) Adding Constructor Methods TASKLARI;
Task 1 
% idstick.m dosyasına, snum'u alan constructor yöntemi ekledim. Constructor, ID stick'in SerialNumber özelliğinin değerini snum'a eşit olarak ayarladım.
classdef idstick
    properties
        SerialNumber
        Status
        Participant
        Course
        Timestamps
    end
    methods
        function id= idstick(snum)
            id.SerialNumber = snum;
        end
        function signal(id,ok)
            if ok
                if (id.Status == "Ready") || (id.Status == "Done")
                    disp("Beep beep")
                else
                    disp("Beep")
                end
            else
                disp("Buzz")
            end
        end
        function id = register(id,name,course)
            id.Participant = name;
            id.Course = course;
            id.Timestamps = NaT(size(course.Waypoints));
            id.Status = "Ready";
            signal(id,true)
        end
    end
end

Task 2
% 54321 seri numaralı id adında bir idstick nesnesi oluşturdum.
id = idstick(54321)

Task 3
% course.m dosyasına bir methods bloğu, üç girdi alan ve sırayla Name, Level, Waypoints özelliklerine atayan bir yöntem ekledim.
classdef course
    properties
        Name
        Level
        Waypoints
    end
    methods
        function c = course (name,lvl,waypts)
            c.Name = name;
            c.Level  = lvl;
            c.Waypoints = waypts;
        end
    end
end

Task 4
% Family Fun adında White düzeyinde ve w'de saklanan ara noktalarla c adında bir course nesnesi oluşturdum.
c = course("Family Fun","White",w);

**Overloading and Precedence(5/6) Adding a Custom Display TASKI;
Task 1
% course.m dosyasına rota bilgilerini level course 'name' ile numwaypoints ile birlikte görüntüleyen bir disp yöntemi ekledim.
classdef course
    properties
        Name
        Level
        Waypoints
    end
    methods
        function c = course(name,lvl,waypts)
            c.Name = name;
            c.Level = lvl;
            c.Waypoints = waypts;
        end
        function ok = checkWaypoint(c,id,wayptidx)
            [~,prevwpidx] = max(id.Timestamps);
            ok = (wayptidx == (1+prevwpidx));
        end
        function disp(c)
            str = c.Level + " course '" + c.Name + "' with " + ...
                numel(c.Waypoints) + " waypoints";
            disp(str)
        end
    end
end
